/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  image,
} from './components/gallery/interfaces/interfaces';

declare global {

  namespace StencilComponents {
    interface BindGallery {
      'closeButton': boolean;
      'imageLoaded': () => void;
      'imageStartIndex': number;
      'images': Array<image>;
      'nextImage': () => void;
      'openGridGallery': () => void;
      'previousImage': () => void;
      'rotateButton': boolean;
      'setImage': (imageIndex: number) => void;
    }
  }

  interface HTMLBindGalleryElement extends StencilComponents.BindGallery, HTMLStencilElement {}

  var HTMLBindGalleryElement: {
    prototype: HTMLBindGalleryElement;
    new (): HTMLBindGalleryElement;
  };
  interface HTMLElementTagNameMap {
    'bind-gallery': HTMLBindGalleryElement;
  }
  interface ElementTagNameMap {
    'bind-gallery': HTMLBindGalleryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bind-gallery': JSXElements.BindGalleryAttributes;
    }
  }
  namespace JSXElements {
    export interface BindGalleryAttributes extends HTMLAttributes {
      'closeButton'?: boolean;
      'imageStartIndex'?: number;
      'images'?: Array<image>;
      'onOnGalleryClose'?: (event: CustomEvent) => void;
      'onOnImageChange'?: (event: CustomEvent<number>) => void;
      'rotateButton'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;